trainer: matdeeplearn.trainers.PropertyTrainer

task:
  run_mode: train
  identifier: my_train_job
  parallel: False
  # If seed is not set, then it will be random every time
  seed: 
  # Defaults to run directory if not specified
  save_dir: 
  # continue from a previous job
  continue_job: True
  # spefcify if the training state is loaded: epochs, learning rate, etc
  load_training_state: False
  # Path to the checkpoint.pt file
  checkpoint_path: best_checkpoint.pt
  # E.g. [train, val, test]
  write_output: [train, val, test]
  # Frequency of writing to file; 0 denotes writing only at the end, 1 denotes writing every time
  output_frequency: 1
  # Frequency of saving model .pt file; 0 denotes saving only at the end, 1 denotes saving every time, -1 denotes never saving; this controls both checkpoint and best_checkpoint
  model_save_frequency: 1
  # Specify if labels are provided for the predict task
  # labels: True
  use_amp: False  

optim:
  max_epochs: 40
  max_checkpoint_epochs: 0
  lr: 0.002
  # Either custom or from torch.nn.functional library. If from torch, loss_type is TorchLossWrapper
  loss:
    loss_type: TorchLossWrapper
    loss_args: {loss_fn: l1_loss}
  # gradient clipping value
  clip_grad_norm: 10       
  batch_size: 100
  optimizer:
    optimizer_type: AdamW
    optimizer_args: {}
  scheduler:
    scheduler_type: ReduceLROnPlateau
    scheduler_args: {mode: min, factor: 0.8, patience: 10, min_lr: 0.00001, threshold: 0.0002}
  #Training print out frequency (print per n number of epochs)
  verbosity: 5
  # tdqm progress bar per batch in the epoch
  batch_tqdm: False

model:
  name: torchmd_etEarly
  # model attributes
  hidden_channels: 128
  num_layers: 8
  num_rbf: 50
  activation: "silu"
  attn_activation: "silu"
  num_heads: 8
  num_post_layers: 1
  post_hidden_channels: 64
  pool: "global_add_pool"
  aggr: "add"
  dropout_rate: 0.0
  # Compute edge indices on the fly in the model forward
  otf_edge_index: True 
  # Compute edge attributes on the fly in the model forward
  otf_edge_attr: True  
  # Compute node attributes on the fly in the model forward
  otf_node_attr: False
  # compute gradients w.r.t to positions and cell, requires otf_edge_attr=True      
  gradient: True

dataset:  
  preprocess_params:
    # one of mdl (minimum image convention), ocp (all neighbors included)
    edge_calc_method: ocp 
    # determine if edges are computed, if false, then they need to be computed on the fly   
    preprocess_edges: False
    # determine if edge attributes are computed during processing, if false, then they need to be computed on the fly   
    preprocess_edge_features: False
    # determine if node attributes are computed during processing, if false, then they need to be computed on the fly   
    preprocess_node_features: False
    cutoff_radius : 8.0
    n_neighbors : 250
    num_offsets: 2
    # dimension of node attributes
    node_dim : 100
    # dimension of edge attributes
    edge_dim : 50
    self_loop: True
    # Method of obtaining atom dictionary: available: (onehot)
    node_representation: onehot    
    all_neighbors: True